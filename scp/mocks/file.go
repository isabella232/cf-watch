// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/pivotal-cf/cf-watch/scp (interfaces: File)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	scp "github.com/pivotal-cf/cf-watch/scp"
)

// Mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *_MockFileRecorder
}

// Recorder for MockFile (not exported)
type _MockFileRecorder struct {
	mock *MockFile
}

func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &_MockFileRecorder{mock}
	return mock
}

func (_m *MockFile) EXPECT() *_MockFileRecorder {
	return _m.recorder
}

func (_m *MockFile) BaseName() string {
	ret := _m.ctrl.Call(_m, "BaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockFileRecorder) BaseName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BaseName")
}

func (_m *MockFile) Children() ([]*scp.File, error) {
	ret := _m.ctrl.Call(_m, "Children")
	ret0, _ := ret[0].([]*scp.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Children() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Children")
}

func (_m *MockFile) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFile) ModePerm() (string, error) {
	ret := _m.ctrl.Call(_m, "ModePerm")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) ModePerm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModePerm")
}

func (_m *MockFile) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}
